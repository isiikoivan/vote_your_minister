<div class="contain-fluid bg-white p-4">
    <?= FlashAlertWidget::widget([
        'duration' => 5000,
        'position' => 'top-right',  // or 'top-right', 'top-left'
        'showCloseButton' => true
    ]) ?>
    <?= $this->render('_table_view_header', ['path' => 'create', 'button' => 'New User', 'page' => 'User List', 'model' => $search, 'export_model' => $search, 'searchFields' => $searchFields]); ?>
    <div class="row">
        <div class="col-12">
            <?=TableGenerator::table($search, $model, $provider); ?>
        </div>
    </div>
</div>


volume 2




widgets
    <?= FlashAlertWidget::widget([
        'duration' => 5000,
        'position' => 'top-right',
        // 'top-right', 'top-left'
        'showCloseButton' => true
    ]) ?>

    <?= PageHeaderWidget::widget([
        'page' => 'Access Groups',
        'export_model' => $export,
        'searchFields' => $searchFields,
        'model' => $search,
        'additional_buttons' => [
            [
                'label' => 'Add New Group',
                'icon' => 'fas fa-plus ',
                'options' => [
                    'class' => 'btn btn-primary',
                    'data-bs-toggle' => 'modal',
                    'data-toggle' => 'modal',
                    'data-bs-target' => '#addGroupModal',
                    'id' => 'import-btn'
                ]
            ]
        ]
    ]) ?>



    <?php
    namespace app\components\Generics;
    use yii\base\Widget;
    use yii\helpers\Html;
    use yii\web\View;
    use app\components\Generics\OneTimeFlash;
    class FlashAlertWidget extends Widget
    {
        //    supported alerts { info, success, error, warning }

        /**
         * Set Duration in milliseconds before the alert fades out
         */
        public $duration = 5000;

        /**
         * Position of the alert (top-center, top-right, top-left)
         */
        public $position = 'top-center';

        /**
         * Whether to show close button
         */
        public $showCloseButton = true;

        /**
         * Bootstrap alert types mapping
         */
        private $alertTypes = [
            'success' => 'alert-success',
            'error' => 'alert-danger',
            'danger' => 'alert-danger',
            'warning' => 'alert-warning',
            'info' => 'alert-info',
        ];

        /**
         * Initializes the widget
         */
        public function init()
        {
            parent::init();
            $this->registerAssets();
        }

        /**
         * Executes the widget
         * and the rendered content
         */
        public function run()
        {
            $flashMessages = $this->getFlashMessages();
            if (empty($flashMessages)) {
                return '';
            }

            $html = Html::beginTag('div', [
                'class' => 'flash-alert-container position-fixed',
                'style' => $this->getPositionStyles(),
                'id' => 'flashAlertContainer'
            ]);

            foreach ($flashMessages as $type => $message) {
                $html .= $this->renderAlert($type, $message);
            }

            $html .= Html::endTag('div');
            return $html;
        }

        /**
         * Gets all flash messages
         */
        private function getFlashMessages()
        {
            $messages = [];
            foreach ($this->alertTypes as $type => $class) {
                if (OneTimeFlash::has($type)) {
                    $messages[$type] = OneTimeFlash::get($type);
                }
            }
            return $messages;
        }

        /**
         * Renders a single alert
         */
        private function renderAlert($type, $message)
        {
            $alertClass = $this->alertTypes[$type] ?? 'alert-info';

            return Html::tag('div',
                ($this->showCloseButton ?
                    '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>' : '') .
                $message,
                [
                    'class' => "alert $alertClass alert-dismissible fade show",
                    'role' => 'alert'
                ]
            );
        }

        /**
         * Gets CSS styles for positioning
         */
        private function getPositionStyles()
        {
            $styles = [
                'z-index' => '9999',
                'top' => '20px',
            ];

            switch ($this->position) {
                case 'top-right':
                    $styles['right'] = '20px';
                    break;
                case 'top-left':
                    $styles['left'] = '20px';
                    break;
                default: // top-center
                    $styles['left'] = '50%';
                    $styles['transform'] = 'translateX(-50%)';
            }

            return $this->convertStylesToString($styles);
        }

        /**
         * Converts style array to string
         */
        private function convertStylesToString($styles)
        {
            return implode(';', array_map(
                fn($key, $value) => "$key: $value",
                array_keys($styles),
                $styles
            ));
        }

        /**
         * Registers required CSS and JS
         */
        private function registerAssets()
        {
            $view = $this->getView();

            // Register CSS
            $css = <<<CSS
                .flash-alert-container {
                    min-width: 300px;
                    max-width: 600px;
                }
                .flash-alert-container .alert {
                    margin-bottom: 10px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                }
    CSS;
            $view->registerCss($css);

            // Register JS
            $js = <<<JS
                document.addEventListener('DOMContentLoaded', function() {
                    const alerts = document.querySelectorAll('.flash-alert-container .alert');
                    alerts.forEach(alert => {
                        setTimeout(() => {
                            if (alert) {
                                const bsAlert = new bootstrap.Alert(alert);
                                bsAlert.close();
                            }
                        }, {$this->duration});
                    });
                });
    JS;
            $view->registerJs($js, View::POS_END);
        }
    }




<?php

namespace app\widgets;

use yii\base\Widget;
use yii\helpers\Html;
use yii\helpers\Url;
class PageHeaderWidget extends Widget
{

    public $page = 'Page Title';

    public $path = '';

    public $button = 'Add New';

    public $export_model = null;

    public $additional_buttons = [];

    public $searchFields;

    public $model;

    public $containerOptions = ['class' => 'mb-5'];

    public $titleContainerOptions = ['class' => 'row mb-3'];

    public $buttonsContainerOptions = ['class' => 'row mb-5'];

    public $buttonsInnerOptions = ['class' => 'col-12 d-flex justify-content-end align-items-center border-bottom border-bottom-3 border-dark-subtle pb-3 gap-2'];

    public $mainButtonOptions = ['class' => 'btn btn-primary'];


    public $exportButtonOptions = ['class' => 'btn btn-danger dropdown-toggle'];

    protected function safeGetClass($object)
    {
        if (is_string($object)) {
            return $object;
        }
        return is_object($object) ? get_class($object) : '';
    }

    protected function renderButton($config)
    {
        if (!is_array($config)) {
            return '';
        }

        $label = $config['label'] ?? '';
        $url = $config['url'] ?? '#';
        $options = $config['options'] ?? [];
        $icon = $config['icon'] ?? '';

        // Merge default classes with provided options
        $defaultOptions = [
            'class' => 'btn',
        ];

        if (is_array($options)) {
            $options = array_merge($defaultOptions, $options);
        }

        // Ensure there's always a btn-* class
        if (!preg_match('/btn-(primary|secondary|success|danger|warning|info|light|dark)/', $options['class'])) {
            $options['class'] .= ' btn-secondary';
        }

        $buttonContent = '';
        if ($icon) {
            $buttonContent .= "<i class=\"{$icon} me-1\"></i>";
        }
        $buttonContent .= Html::encode($label);

        return Html::a($buttonContent, $url, $options);
    }

    /**
     * @inheritdoc
     */
    public function run()
    {
        $html = '';

        // Title section
        $html .= Html::beginTag('div', $this->titleContainerOptions);
        $html .= Html::beginTag('div', ['class' => 'col-12']);
        $html .= Html::tag('h2', Html::encode($this->page));
        $html .= Html::endTag('div');
        $html .= Html::endTag('div');

        // Buttons section
        $html .= Html::beginTag('div', $this->buttonsContainerOptions);
        $html .= Html::beginTag('div', $this->buttonsInnerOptions);

        // Search fields (if provided)
        $html .= Html::beginTag('div', ['class' => 'me-auto']);
        if (isset($this->searchFields) && isset($this->model)) {
            $html .= $this->getView()->render('_search_fields', [
                'searchFields' => $this->searchFields,
                'model' => $this->model
            ]);
        }
        $html .= Html::endTag('div');

        // Export dropdown (if model provided)
        if ($this->export_model !== null) {
            $html .= $this->renderExportDropdown();
        }

        // Main action button (if path provided)
        if ($this->path !== '') {
            $html .= Html::a(
                Html::encode($this->button),
                Url::to([$this->path]),
                array_merge(
                    $this->mainButtonOptions,
                    ['aria-label' => Html::encode($this->button)]
                )
            );
        }

        // Additional buttons
        if (!empty($this->additional_buttons)) {
            if (isset($this->additional_buttons['label'])) {
                // Single button configuration
                $html .= $this->renderButton($this->additional_buttons);
            } else {
                // Multiple buttons
                foreach ($this->additional_buttons as $additionalButton) {
                    $html .= $this->renderButton($additionalButton);
                }
            }
        }

        $html .= Html::endTag('div');
        $html .= Html::endTag('div');

        return $html;
    }

    /**
     * Renders the export dropdown
     *
     * @return string The rendered export dropdown HTML
     */
    protected function renderExportDropdown()
    {
        $html = Html::beginTag('div', ['class' => 'dropdown']);

        // Dropdown toggle button with all attributes passed through
        $html .= Html::button(
            '<i class="ri-article-fill"></i> <span>Export</span>',
            array_merge(
                $this->exportButtonOptions,
                [
                    'type' => 'button',
                    'data-bs-toggle' => 'dropdown',
                    'aria-expanded' => 'false'
                ]
            )
        );

        // Dropdown menu
        $html .= Html::beginTag('ul', ['class' => 'dropdown-menu']);

        // Excel export option
        $html .= Html::beginTag('li');
        $html .= Html::a(
            '<i class="ri-file-excel-2-line"></i> As Excel',
            Url::to(['excel-export', 'model' => $this->safeGetClass($this->export_model)]),
            ['class' => 'dropdown-item']
        );
        $html .= Html::endTag('li');

        // PDF export option
        $html .= Html::beginTag('li');
        $html .= Html::a(
            '<i class="ri-file-pdf-2-line"></i> As PDF',
            Url::to(['pdf-export', 'model' => $this->safeGetClass($this->export_model)]),
            ['class' => 'dropdown-item']
        );
        $html .= Html::endTag('li');

        $html .= Html::endTag('ul');
        $html .= Html::endTag('div');

        return $html;
    }
}

/**
 *
 * Usage example
 * <?= PageHeaderWidget::widget([
 *     'page' => 'Users Management',
 *     'path' => 'user/create',
 *     'button' => 'Add User',
 *     'export_model' => User::class,
 *     'searchFields' => $searchFields,
 *     'model' => $searchModel,
 *     'additional_buttons' => [
 *         [
 *             'label' => 'Import Users',
 *             'url' => ['user/import'],
 *             'icon' => 'ri-upload-line',
 *             'options' => [
 *                 'class' => 'btn btn-success',
 *                 'data-toggle' => 'modal',
 *                 'data-target' => '#importModal',
 *                 'id' => 'import-btn'
 *             ]
 *         ]
 *     ]
 * ]) ?>
 */


component
<?php

namespace app\components\Generics;

use yii\base\Component;
use yii\bootstrap5\LinkPager;
use yii\helpers\Html;

class TableGenerator extends Component
{
    public static function table($model, $data_in = [], $provider = null) {
        // Get attributes from the model, excluding 'actions'
        $attributes = $model->tableColumns();
        $data = $data_in;

        // Check if actions are defined
        $hasActions = false;
        $actionColumn = null;
        foreach ($attributes as $key => $headerInfo) {
            if (is_array($headerInfo) && isset($headerInfo['actions'])) {
                $hasActions = true;
                $actionColumn = [
                    'key' => $key,
                    'actions' => $headerInfo['actions']
                ];
                unset($attributes[$key]);
                break;
            }
        }

        // Start table HTML
        $html = '<div class="table-responsive">';
        $html .= '<table class="table table-hover mb-3">';

        // Table header
        $html .= '<thead class="thead-dark">';
        $html .= '<tr>';

        // Add row number column header as the first column
        $html .= '<th>No</th>';

        // Render standard column headers
        foreach ($attributes as $key => $headerInfo) {
            $header = is_array($headerInfo) ? $headerInfo['label'] : $headerInfo;
            $html .= '<th>' . Html::encode($header) . '</th>';
        }

        // Add actions column header if actions exist
        if ($hasActions) {
            $html .= '<th>Actions</th>';
        }

        $html .= '</tr></thead>';

        // Table body
        $html .= '<tbody>';
        foreach ($data as $index => $row) {
            $html .= '<tr>';

            // Add row number as the first column
            $html .= '<td>' . ($index + 1) . '</td>';

            // Render standard columns
            foreach ($attributes as $key => $header) {
                if (is_array($header) && isset($header['format']) && is_callable($header['format'])) {
                    $value = $header['format']($row[$key]);
                } else {
                    $value = $row[$key];
                }
                $html .= in_array($key,['is_active','locked','active','status','archived'])  ? '<td>' . $value . '</td>' : '<td>' . Html::encode($value) . '</td>';
            }

            // Render actions column if actions exist
            if ($hasActions && $actionColumn) {
                $html .= '<td>';
                foreach ($actionColumn['actions'] as $action) {
                    if (is_callable($action)) {
                        $html .= $action($row) . ' ';
                    }
                }
                $html .= '</td>';
            }

            $html .= '</tr>';
        }

        $html .= '</tbody>';
        $html .= '</table>';

        // Add pagination if provider is passed
        if ($provider !== null) {
            $html .= '<div class="mt-3">';
            // Start output buffering to capture LinkPager widget
            ob_start();
            echo LinkPager::widget(['pagination' => $provider->pagination]);
            $paginationHtml = ob_get_clean();
            $html .= $paginationHtml;
            $html .= '</div>';
        }

        $html .= '</div>';

        echo $html;
    }
}


 return $this->render('index',  [
            'dataProvider' => $dataProvider,
            'searchFields' => $searchModel->searchFields(),
            'export_model'=>$searchModel,
            'render_header'=>$this->renderSearchAndExportSection($searchModel,$searchModel->searchFields(),$searchModel,"create","New Course","Course Unit"),
        ]);





✅ Generalized FlashMessage Widget
widgets/FlashMessage.php

namespace app\widgets;

use yii\base\Widget;
use yii\bootstrap5\Alert;

class FlashMessage extends Widget
{
    // Options to customize behavior
    public $useDismiss = true;      // Whether to include a dismiss button
    public $autoFade = false;       // Whether to auto-fade the alert after a timeout
    public $fadeTimeout = 3000;     // Timeout in milliseconds for auto-fade
    public $alertTypes = ['success', 'danger', 'info', 'warning', 'secondary', 'primary', 'light', 'dark']; // Alert types supported by Bootstrap

    public function run()
    {
        $html = '';
        $flashes = \Yii::$app->session->getAllFlashes();

        // Loop through all the flash messages
        foreach ($flashes as $type => $messages) {
            $messages = (array)$messages;

            foreach ($messages as $message) {
                // Determine the Bootstrap alert class based on the flash type
                $alertClass = $this->getAlertClass($type);

                // Prepare the options for the alert widget
                $options = [
                    'class' => 'alert ' . $alertClass,
                ];

                // If we want a dismiss button, add relevant classes and attributes
                if ($this->useDismiss) {
                    $options['class'] .= ' alert-dismissible fade show';
                    $options['role'] = 'alert';
                }

                // Render the alert widget
                $html .= Alert::widget([
                    'body' => $message,
                    'options' => $options,
                    'closeButton' => $this->useDismiss
                        ? ['class' => 'btn-close', 'data-bs-dismiss' => 'alert', 'aria-label' => 'Close']
                        : false,
                ]);
            }
        }

        // If auto-fade is enabled, add JavaScript for fading alerts
        if ($this->autoFade) {
            $html .= "<script>
                setTimeout(function () {
                    $('.alert').fadeOut('slow');
                }, {$this->fadeTimeout});
            </script>";
        }

        return $html;
    }

    /**
     * Returns the correct Bootstrap alert class based on the message type.
     *
     * @param string $type Flash message type
     * @return string Bootstrap alert class
     */
    protected function getAlertClass($type)
    {
        // Map the flash message type to a Bootstrap alert class
        switch ($type) {
            case 'success':    return 'alert-success';
            case 'danger':     return 'alert-danger';
            case 'info':       return 'alert-info';
            case 'warning':    return 'alert-warning';
            case 'secondary':  return 'alert-secondary';
            case 'primary':    return 'alert-primary';
            case 'light':      return 'alert-light';
            case 'dark':       return 'alert-dark';
            default:           return 'alert-warning'; // Default to warning if no type matches
        }
    }
}

✅ Usage Example

In your view or layout, you can use the widget like this:
Basic Usage (simple flash message display):

<?= \app\widgets\FlashMessage::widget(); ?>

Usage with Dismiss Button:

<?= \app\widgets\FlashMessage::widget(['useDismiss' => true]); ?>

Usage with Auto-Fade Out:

<?= \app\widgets\FlashMessage::widget([
    'autoFade' => true,
    'fadeTimeout' => 4000,  // Auto fade after 4 seconds
]); ?>

Usage with All Options:

<?= \app\widgets\FlashMessage::widget([
    'useDismiss' => true,
    'autoFade' => true,
    'fadeTimeout' => 5000,  // Auto fade after 5 seconds
]); ?>

✅ Features Covered:

    Basic Flash Messages:

        It will display flash messages based on the session's getAllFlashes().

    With Dismiss Button:

        If useDismiss is set to true, each alert will have a dismiss button that users can click to close the message.

    Auto-Fade Timeout:

        If autoFade is enabled, all alerts will automatically fade out after the specified fadeTimeout.

    Alert Types Mapping:

        The widget supports all standard Bootstrap alert types (success, danger, info, warning, etc.) and defaults to alert-warning if the type is not found in the session.

This generalized widget gives you flexibility and reusability. You can use it in various places across your app and control its behavior (e.g., whether it has a dismiss button, whether it fades out after a timeout).

Let me know if you need further tweaks or a more specific configuration!
You said:
alerttype usage
ChatGPT said:

Ah, I see you're asking for clarification on how to use the alertTypes property in the widget. This property is intended to control which types of alert messages (success, danger, info, etc.) you want to display, or perhaps to restrict what types of flash messages are shown.

Here’s an enhanced explanation and usage of alertTypes in the widget.
Explanation of alertTypes

The alertTypes property is an array that allows you to specify which types of alerts you want to render. In the FlashMessage widget, this property is meant to filter out unwanted types, so if you only want to display success and info messages, for example, you can set this property like this:

'alertTypes' => ['success', 'info'],

This allows you to control what types of alerts are shown, rather than showing all types of alerts from the session.
Updated Widget to Include alertTypes Filtering

Here’s an updated version of the widget that uses alertTypes to filter the types of flash messages being displayed.
✅ Updated FlashMessage Widget with alertTypes Filtering
widgets/FlashMessage.php

namespace app\widgets;

use yii\base\Widget;
use yii\bootstrap5\Alert;

class FlashMessage extends Widget
{
    // Options to customize behavior
    public $useDismiss = true;      // Whether to include a dismiss button
    public $autoFade = false;       // Whether to auto-fade the alert after a timeout
    public $fadeTimeout = 3000;     // Timeout in milliseconds for auto-fade
    public $alertTypes = ['success', 'danger', 'info', 'warning', 'secondary', 'primary', 'light', 'dark']; // Alert types supported by Bootstrap

    public function run()
    {
        $html = '';
        $flashes = \Yii::$app->session->getAllFlashes();

        // Loop through all the flash messages
        foreach ($flashes as $type => $messages) {
            // Skip types that are not in the allowed alertTypes
            if (!in_array($type, $this->alertTypes)) {
                continue;
            }

            $messages = (array)$messages;

            foreach ($messages as $message) {
                // Determine the Bootstrap alert class based on the flash type
                $alertClass = $this->getAlertClass($type);

                // Prepare the options for the alert widget
                $options = [
                    'class' => 'alert ' . $alertClass,
                ];

                // If we want a dismiss button, add relevant classes and attributes
                if ($this->useDismiss) {
                    $options['class'] .= ' alert-dismissible fade show';
                    $options['role'] = 'alert';
                }

                // Render the alert widget
                $html .= Alert::widget([
                    'body' => $message,
                    'options' => $options,
                    'closeButton' => $this->useDismiss
                        ? ['class' => 'btn-close', 'data-bs-dismiss' => 'alert', 'aria-label' => 'Close']
                        : false,
                ]);
            }
        }

        // If auto-fade is enabled, add JavaScript for fading alerts
        if ($this->autoFade) {
            $html .= "<script>
                setTimeout(function () {
                    $('.alert').fadeOut('slow');
                }, {$this->fadeTimeout});
            </script>";
        }

        return $html;
    }

    /**
     * Returns the correct Bootstrap alert class based on the message type.
     *
     * @param string $type Flash message type
     * @return string Bootstrap alert class
     */
    protected function getAlertClass($type)
    {
        // Map the flash message type to a Bootstrap alert class
        switch ($type) {
            case 'success':    return 'alert-success';
            case 'danger':     return 'alert-danger';
            case 'info':       return 'alert-info';
            case 'warning':    return 'alert-warning';
            case 'secondary':  return 'alert-secondary';
            case 'primary':    return 'alert-primary';
            case 'light':      return 'alert-light';
            case 'dark':       return 'alert-dark';
            default:           return 'alert-warning'; // Default to warning if no type matches
        }
    }
}

✅ How to Use the alertTypes Property

When you use this widget, you can specify the types of messages you want to display by setting the alertTypes property.
Example 1: Display Only success and info Messages

If you only want to display success and info messages (ignoring others like danger, warning, etc.), you can set the alertTypes property like this:

<?= \app\widgets\FlashMessage::widget([
    'alertTypes' => ['success', 'info'],
    'useDismiss' => true,  // Optional: Include dismiss button
    'autoFade' => true,    // Optional: Enable auto fade after a timeout
    'fadeTimeout' => 5000, // Optional: Auto fade timeout
]); ?>

Example 2: Display All Alert Types (Default Behavior)

By default, the alertTypes array includes all alert types (success, danger, info, etc.). So if you don’t specify the alertTypes property, it will show all types of flash messages from the session.

<?= \app\widgets\FlashMessage::widget([
    'useDismiss' => true,  // Include dismiss button
    'autoFade' => true,    // Enable auto fade
    'fadeTimeout' => 4000, // Auto fade timeout
]); ?>

Example 3: Display Only warning and danger Messages

If you only want to show warning and danger messages, you can specify them like this:

<?= \app\widgets\FlashMessage::widget([
    'alertTypes' => ['warning', 'danger'], // Only display 'warning' and 'danger'
    'useDismiss' => true,                  // Include dismiss button
    'autoFade' => true,                    // Enable auto fade
    'fadeTimeout' => 3000,                 // Auto fade timeout
]); ?>